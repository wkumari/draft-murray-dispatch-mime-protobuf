



Internet Engineering Task Force (IETF)                 M. Kucherawy, Ed.
Request for Comments: 0                                                 
Category: Informational                                        W. Kumari
ISSN: 2070-1721                                                   Google
                                                           17 April 2025


              Media Type Registration for Protocol Buffers

Abstract

   This document registers media types for Protocol Buffers, a common
   extensible mechanism for serializing structured data.

Status of This Memo

   This document is not an Internet Standards Track specification; it is
   published for informational purposes.

   This document is a product of the Internet Engineering Task Force
   (IETF).  It represents the consensus of the IETF community.  It has
   received public review and has been approved for publication by the
   Internet Engineering Steering Group (IESG).  Not all documents
   approved by the IESG are candidates for any level of Internet
   Standard; see Section 2 of RFC 7841.

   Information about the current status of this document, any errata,
   and how to provide feedback on it may be obtained at
   https://www.rfc-editor.org/info/rfc0.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Revised BSD License text as described in Section 4.e of the
   Trust Legal Provisions and are provided without warranty as described
   in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Payload Description
   3.  Encoding Considerations
   4.  Security Considerations
   5.  IANA Considerations
     5.1.  Registration for "application/protobuf" Media Type
     5.2.  Registration for "application/protobuf+json" Media Type
   6.  References
     6.1.  Normative References
     6.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   Protocol Buffers ("protobufs") were introduced in 2008 as a free,
   open source, platform-independent mechanism for transport and storage
   of structured data.  Their use has become increasingly common.

   The specification for protobufs generally includes an interface
   definition language and a code generator so that clients and servers
   understanding the structured data can be easily crafted and deployed.

   Serialized objects are occasionally transported within media that
   make use of media types (see [RFC2045] et seq) to identify payloads.
   Accordingly, current and historical media types used for this purpose
   would benefit from registration.  This document requests those
   registrations of IANA.

2.  Payload Description

   These media types are used in the transport of serialized objects
   only.  The IDL and object definitions, if transported, would be used
   with any appropriate text media type.  In the three figures below,
   only the third of these would ever be used with these media types (a
   JSON example is depicted).

   An example use of the IDL to specify a "Person" object:

   edition = "2023";

   message Person {
     string name = 1;
     int32 id = 2;
     string email = 3;
   }

   An example of python code that uses the IDL definition above to
   create an instance of a "Person" object:

   person = Person()
   person.id = 1234
   person.name = "John Doe"
   person.email = "jdoe@example.com"

   An example of the above instance expressed in JSON:

   TBD

3.  Encoding Considerations

   A protobuf payload can be either in JSON form or in binary form.  For
   binary forms that need to transit non-binary transports, base64 (xref
   to RFC 4648) is recommended.

4.  Security Considerations

   The payload for these media types contain no directly executable
   code.  However, it is common for a protobuf definition to be used as
   input to a code generator which then does produce something
   executable.

   A malformed request to a protobuf server could be crafted to, for
   example, allocate a very large amount of memory, potentially
   impacting other operations on that server.

   Protobuf provides no security services.  Clients or servers for which
   this is a concern should avail themselves of solutions that provide
   such capabilities (e.g., [RFC8446]).

5.  IANA Considerations

5.1.  Registration for "application/protobuf" Media Type

   Type name: application

   Subtype name: protobuf

   Required parameters: N/A

   Optional parameters: N/A

   Encoding considerations: binary

   Security considerations: see Section 4

   Interoperability considerations: The protobufs specification includes
   versioning provisions to ensure backward compatibility when
   encountering payloads with unknown properties.

   Published specification: [Protobuf]

   Applications that use this media type: Any application with a need to
   exchange or store structured objects across platforms or
   implementations.

   Fragment identifier considerations: None.

   Additional information:

    Deprecated alias names for this type: x-protobuf
    Magic number(s):
    File extension(s):
    Macintosh file type code(s):

   Person & email address to contact for further information: protobuf-
   external@google.com

   Intended usage: COMMON

   Restrictions on usage: N/A

   Author: Rob (details here)

   Change controller: protobuf-external@google.com

   Provisional registration? (standards tree only): No

5.2.  Registration for "application/protobuf+json" Media Type

   Type name: application

   Subtype name: protobuf

   Required parameters: N/A

   Optional parameters: N/A

   Encoding considerations: Same as encoding considerations of
   application/json as specified in [RFC7159], Section 11.

   Security considerations: see Section 4

   Interoperability considerations: The protobufs specification includes
   versioning provisions to ensure backward compatibility when
   encountering payloads with unknown properties.

   Published specification: [Protobuf]

   Applications that use this media type: Any application with a need to
   exchange or store structured objects across platforms or
   implementations.

   Fragment identifier considerations: None.

   Additional information:

    Deprecated alias names for this type: x-protobuf+json
    Magic number(s):
    File extension(s):
    Macintosh file type code(s):

   Person & email address to contact for further information: protobuf-
   external@google.com

   Intended usage: COMMON

   Restrictions on usage: N/A

   Author: Rob (details here)

   Change controller: protobuf-external@google.com

   Provisional registration? (standards tree only): No

6.  References

6.1.  Normative References

   [Protobuf] "Protocol Buffers", n.d., <https://protobuf.dev/>.

   [RFC4289]  Freed, N. and J. Klensin, "Multipurpose Internet Mail
              Extensions (MIME) Part Four: Registration Procedures",
              BCP 13, RFC 4289, DOI 10.17487/RFC4289, December 2005,
              <https://www.rfc-editor.org/rfc/rfc4289>.

   [RFC4648]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 4648, DOI 10.17487/RFC4648, October 2006,
              <https://www.rfc-editor.org/rfc/rfc4648>.

   [RFC6657]  Melnikov, A. and J. Reschke, "Update to MIME regarding
              "charset" Parameter Handling in Textual Media Types",
              RFC 6657, DOI 10.17487/RFC6657, July 2012,
              <https://www.rfc-editor.org/rfc/rfc6657>.

   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, "Media Type
              Specifications and Registration Procedures", BCP 13,
              RFC 6838, DOI 10.17487/RFC6838, January 2013,
              <https://www.rfc-editor.org/rfc/rfc6838>.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <https://www.rfc-editor.org/rfc/rfc7159>.

6.2.  Informative References

   [RFC2045]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part One: Format of Internet Message
              Bodies", RFC 2045, DOI 10.17487/RFC2045, November 1996,
              <https://www.rfc-editor.org/rfc/rfc2045>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/rfc/rfc8446>.

Acknowledgments

   Orie Steele provided valuable feedback to this work.

Authors' Addresses

   Murray S. Kucherawy (editor)
   Email: superuser@gmail.com


   Warren Kumari
   Google
   Email: warren@kumari.net
